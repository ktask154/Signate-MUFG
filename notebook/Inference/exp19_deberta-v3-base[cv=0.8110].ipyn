{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMFbm8meskg4SrXukKzB7Oz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"3c40ea93c5da48c8b6e5c93c00cd2258":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a656f530814644cab038f21a3858262e","IPY_MODEL_5d023453080d41f8bcbbc90afc233b58","IPY_MODEL_f446c4c66b4a4e2fa77b563007548f61"],"layout":"IPY_MODEL_151e47d423a24321a28bf7cd14a1d03a"}},"a656f530814644cab038f21a3858262e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_accc56883f6c4edc9757ff0cd2351c8a","placeholder":"​","style":"IPY_MODEL_b70c32d91f0447d494c42797a6cab732","value":""}},"5d023453080d41f8bcbbc90afc233b58":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8c0aa1d4fd564958a26c30abceae49e0","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b9bffd9daed240a68a71220618603784","value":0}},"f446c4c66b4a4e2fa77b563007548f61":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d69ef2db4aaf494fb59459b7bea227ad","placeholder":"​","style":"IPY_MODEL_3e8c83985c0c415388abda99dec6f849","value":" 0/0 [00:00&lt;?, ?it/s]"}},"151e47d423a24321a28bf7cd14a1d03a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"accc56883f6c4edc9757ff0cd2351c8a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b70c32d91f0447d494c42797a6cab732":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8c0aa1d4fd564958a26c30abceae49e0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"20px"}},"b9bffd9daed240a68a71220618603784":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d69ef2db4aaf494fb59459b7bea227ad":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3e8c83985c0c415388abda99dec6f849":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ytTpOEfiJnd5","executionInfo":{"status":"ok","timestamp":1663216938623,"user_tz":-540,"elapsed":19817,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"1f1fff3a-5120-422f-b9bd-c30e9989642f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["!pip install transformers\n","!pip install datasets\n","!pip install sentencepiece"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vvJnJZ3aJ028","executionInfo":{"status":"ok","timestamp":1663216962116,"user_tz":-540,"elapsed":23497,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"4090b5b9-f38f-492a-fedb-232ad66abad6"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.22.0-py3-none-any.whl (4.9 MB)\n","\u001b[K     |████████████████████████████████| 4.9 MB 6.8 MB/s \n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.0)\n","Collecting huggingface-hub<1.0,>=0.9.0\n","  Downloading huggingface_hub-0.9.1-py3-none-any.whl (120 kB)\n","\u001b[K     |████████████████████████████████| 120 kB 50.7 MB/s \n","\u001b[?25hRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Collecting tokenizers!=0.11.3,<0.13,>=0.11.1\n","  Downloading tokenizers-0.12.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (6.6 MB)\n","\u001b[K     |████████████████████████████████| 6.6 MB 41.9 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.12.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0,>=0.9.0->transformers) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.8.1)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.6.15)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.9.1 tokenizers-0.12.1 transformers-4.22.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting datasets\n","  Downloading datasets-2.4.0-py3-none-any.whl (365 kB)\n","\u001b[K     |████████████████████████████████| 365 kB 8.0 MB/s \n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.3.5)\n","Collecting xxhash\n","  Downloading xxhash-3.0.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[K     |████████████████████████████████| 212 kB 51.2 MB/s \n","\u001b[?25hRequirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (2022.8.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.3)\n","Requirement already satisfied: huggingface-hub<1.0.0,>=0.1.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.9.1)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.7/dist-packages (from datasets) (3.8.1)\n","Requirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (6.0.1)\n","Requirement already satisfied: dill<0.3.6 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.5.1)\n","Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (4.64.1)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Collecting multiprocess\n","  Downloading multiprocess-0.70.13-py37-none-any.whl (115 kB)\n","\u001b[K     |████████████████████████████████| 115 kB 51.7 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.21.6)\n","Collecting responses<0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (4.12.0)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.0.2)\n","Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.1.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.8.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (22.1.0)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.2.0)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (2.1.1)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: asynctest==0.13.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (0.13.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (6.0.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.1.0->datasets) (3.8.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.1.0->datasets) (6.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->datasets) (3.0.9)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2022.6.15)\n","Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1\n","  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n","\u001b[K     |████████████████████████████████| 127 kB 55.9 MB/s \n","\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->datasets) (3.8.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2022.2.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->datasets) (1.15.0)\n","Installing collected packages: urllib3, xxhash, responses, multiprocess, datasets\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","Successfully installed datasets-2.4.0 multiprocess-0.70.13 responses-0.18.0 urllib3-1.25.11 xxhash-3.0.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting sentencepiece\n","  Downloading sentencepiece-0.1.97-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[K     |████████████████████████████████| 1.3 MB 7.1 MB/s \n","\u001b[?25hInstalling collected packages: sentencepiece\n","Successfully installed sentencepiece-0.1.97\n"]}]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vzNlSn6jJ3lh","executionInfo":{"status":"ok","timestamp":1663216962559,"user_tz":-540,"elapsed":448,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"3c394237-01d7-4772-acc4-567b4555f2b3"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Thu Sep 15 04:42:42 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   43C    P0    32W / 250W |      0MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":["import os\n","import gc\n","import math\n","import time\n","import random\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import warnings\n","warnings.simplefilter('ignore')\n","from tqdm import tqdm\n","import re\n","import html\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.optim import Adam, SGD, AdamW, RAdam\n","from torch.optim import lr_scheduler\n","from torch.utils.data import DataLoader, Dataset\n","\n","from sklearn.model_selection import StratifiedKFold,StratifiedGroupKFold,GroupKFold\n","from sklearn.metrics import log_loss,f1_score\n","\n","from transformers import AutoModel, AutoConfig, AutoTokenizer, AdamW, DataCollatorWithPadding\n","from transformers import get_linear_schedule_with_warmup, get_cosine_schedule_with_warmup\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":105,"referenced_widgets":["3c40ea93c5da48c8b6e5c93c00cd2258","a656f530814644cab038f21a3858262e","5d023453080d41f8bcbbc90afc233b58","f446c4c66b4a4e2fa77b563007548f61","151e47d423a24321a28bf7cd14a1d03a","accc56883f6c4edc9757ff0cd2351c8a","b70c32d91f0447d494c42797a6cab732","8c0aa1d4fd564958a26c30abceae49e0","b9bffd9daed240a68a71220618603784","d69ef2db4aaf494fb59459b7bea227ad","3e8c83985c0c415388abda99dec6f849"]},"id":"g4-XpIZPJ6lb","executionInfo":{"status":"ok","timestamp":1663216970193,"user_tz":-540,"elapsed":7636,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"8bb27f6c-e5ef-49cd-e36e-d91cb659c3dd"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["The cache for model files in Transformers v4.22.0 has been updated. Migrating your old cache. This is a one-time only operation. You can interrupt this and resume the migration later on by calling `transformers.utils.move_cache()`.\n"]},{"output_type":"stream","name":"stdout","text":["Moving 0 files to the new cache system\n"]},{"output_type":"display_data","data":{"text/plain":["0it [00:00, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3c40ea93c5da48c8b6e5c93c00cd2258"}},"metadata":{}}]},{"cell_type":"code","source":["DIR = '/content/drive/MyDrive/Competitions/Signate/MUFJ'\n","INPUT_DIR = os.path.join(DIR,'input')\n","OUTPUT_DIR = os.path.join(DIR,'output')\n","OUTPUT_SUB_DIR = os.path.join(OUTPUT_DIR,'submission')\n","#OUTPUT_MODEL_DIR = os.path.join(OUTPUT_DIR,'model')\n","OUTPUT_MODEL_DIR = DIR + '/output/model/EXP19/'\n","if not os.path.exists(OUTPUT_MODEL_DIR):\n","    os.makedirs(OUTPUT_MODEL_DIR)"],"metadata":{"id":"RGGBH4TNJ-Ro","executionInfo":{"status":"ok","timestamp":1663216970911,"user_tz":-540,"elapsed":733,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["class CFG:\n","    num_workers=4\n","    path=OUTPUT_MODEL_DIR\n","    config_path=path+'config.pth'\n","    model=\"microsoft/deberta-v3-base\"\n","    batch_size=32\n","    fc_dropout=0.2\n","    target_size=1\n","    max_len=256\n","    seed=42\n","    n_fold=4\n","    trn_fold=[0, 1, 2, 3]\n","    gradient_checkpointing=True\n","    freezing=True\n","    clean_content = True"],"metadata":{"id":"YR4j4hxxKLo_","executionInfo":{"status":"ok","timestamp":1663216971349,"user_tz":-540,"elapsed":441,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def get_score(labels, outputs):\n","    thresh = 0.5\n","    y_pred = outputs\n","    y_true = labels\n","    return f1_score(y_true, (y_pred>thresh).astype(int))\n","\n","\n","def get_logger(filename=OUTPUT_MODEL_DIR+'train'):\n","    from logging import getLogger, INFO, FileHandler, Formatter, StreamHandler\n","    logger = getLogger(__name__)\n","    logger.setLevel(INFO)\n","    handler1 = StreamHandler()\n","    handler1.setFormatter(Formatter(\"%(message)s\"))\n","    handler2 = FileHandler(filename=f\"{filename}.log\")\n","    handler2.setFormatter(Formatter(\"%(message)s\"))\n","    logger.addHandler(handler1)\n","    logger.addHandler(handler2)\n","    return logger\n","\n","LOGGER = get_logger()\n","\n","def seed_everything(seed=CFG.seed):\n","    random.seed(seed)\n","    os.environ['PYTHONHASHSEED'] = str(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    torch.cuda.manual_seed(seed)\n","    torch.backends.cudnn.deterministic = True\n","    \n","seed_everything(seed=CFG.seed)"],"metadata":{"id":"Kxfj00EuK4kL","executionInfo":{"status":"ok","timestamp":1663216971349,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def freeze(module):\n","    \"\"\"\n","    Freezes module's parameters.\n","    \"\"\"\n","    \n","    for parameter in module.parameters():\n","        parameter.requires_grad = False\n","        \n","def get_freezed_parameters(module):\n","    \"\"\"\n","    Returns names of freezed parameters of the given module.\n","    \"\"\"\n","    \n","    freezed_parameters = []\n","    for name, parameter in module.named_parameters():\n","        if not parameter.requires_grad:\n","            freezed_parameters.append(name)\n","            \n","    return freezed_parameters\n","\n","def set_embedding_parameters_bits(embeddings_path, optim_bits=32):\n","    \"\"\"\n","    https://github.com/huggingface/transformers/issues/14819#issuecomment-1003427930\n","    \"\"\"\n","    \n","    embedding_types = (\"word\", \"position\", \"token_type\")\n","    for embedding_type in embedding_types:\n","        attr_name = f\"{embedding_type}_embeddings\"\n","        \n","        if hasattr(embeddings_path, attr_name): \n","            bnb.optim.GlobalOptimManager.get_instance().register_module_override(\n","                getattr(embeddings_path, attr_name), 'weight', {'optim_bits': optim_bits}\n","            )"],"metadata":{"id":"yj8DrnllLRqs","executionInfo":{"status":"ok","timestamp":1663216971350,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["oof_df = pd.read_pickle(CFG.path+'oof_df.pkl')\n","labels = oof_df['state'].values\n","preds = oof_df['pred'].values\n","score = get_score(labels, preds)\n","LOGGER.info(f'CV Score: {score:<.4f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oXzizdz8LE4T","executionInfo":{"status":"ok","timestamp":1663216972746,"user_tz":-540,"elapsed":1400,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"0a880843-c899-4172-837e-1a05469b0232"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["CV Score: 0.8110\n","INFO:__main__:CV Score: 0.8110\n"]}]},{"cell_type":"code","source":["test = pd.read_csv(os.path.join(INPUT_DIR,'test.csv'))\n","sub = pd.read_csv(os.path.join(INPUT_DIR,'sample_submit.csv'),header=None)\n","sub.columns = ['id','state']"],"metadata":{"id":"62JPhXXvLTVJ","executionInfo":{"status":"ok","timestamp":1663216991795,"user_tz":-540,"elapsed":2458,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def remove_URL(text):\n","    url = re.compile(r'https?://\\S+|www\\.\\S+')\n","    return url.sub('',text)\n","\n","def remove_html(text):\n","    html=re.compile(r\"<[^>]*?>\")\n","    return html.sub('',text)\n","\n","def cleaning(texts):\n","    clean_texts = []\n","    for text in texts:\n","        # htmlタグを削除\n","        text = remove_URL(text)\n","        text = remove_html(text)\n","        #アルファベット以外をスペースに置き換え\n","        #clean_punc = re.sub(r'[^a-zA-Z]', ' ', text)\n","        #改行削除\n","        #text = text.replace(\"\\n\",\"\")\n","        clean_texts.append(text)\n","    return clean_texts\n","\n","def get_goal_values(df):\n","  df[\"goal\"].replace(\"100000+\",\"100000-100000\",inplace=True)\n","  _df = df[\"goal\"].str.split('-').apply(pd.Series).astype(float)\n","  _df.columns = [\"goal_max\",\"goal_min\"]\n","  df[\"goal_max\"] = _df[\"goal_max\"].astype(str)\n","  df[\"goal_min\"] = _df[\"goal_min\"].astype(str)\n","  df[\"goal_median\"] = _df[[\"goal_max\",\"goal_min\"]].median(axis=1)\n","  df[\"goal_median\"] = df[\"goal_median\"].astype(int)\n","  return df\n","\n","if CFG.clean_content==True:\n","    test['html_content'] = test['html_content'].map(lambda x: str(x))\n","    test['html_content'] = test['html_content'].apply(html.unescape)\n","    p = re.compile(r\"<[^>]*?>|&amp;|[/'’\\\"”]\")\n","    test['html_content'] = test['html_content'].map(lambda x: p.sub(\"\", x))\n","    test['html_content'] = test['html_content'].map(lambda x: x.lstrip())\n","    test['html_content'] = test['html_content'].fillna('missing')\n","\n","test = get_goal_values(test)\n","test['inputs'] = test.goal_median.astype(str) + ' [SEP] ' + test.duration.astype(str) + ' [SEP] ' + test.country + ' [SEP] ' + test.category1 + ' [SEP] ' + test.category2 + ' [SEP] ' + test.html_content"],"metadata":{"id":"YkymMaYHLZsI","executionInfo":{"status":"ok","timestamp":1663216995857,"user_tz":-540,"elapsed":4065,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# ====================================================\n","# tokenizer\n","# ====================================================\n","CFG.tokenizer = AutoTokenizer.from_pretrained(CFG.path+'tokenizer/')"],"metadata":{"id":"vmSV1K_mL2jm","executionInfo":{"status":"ok","timestamp":1663216997813,"user_tz":-540,"elapsed":1958,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# ====================================================\n","# Dataset\n","# ====================================================\n","def prepare_input(cfg, text):\n","    inputs = cfg.tokenizer(text,\n","                           add_special_tokens=True,\n","                           max_length=cfg.max_len,\n","                           padding=\"max_length\",\n","                           return_offsets_mapping=False,\n","                           truncation=True)\n","    for k, v in inputs.items():\n","        inputs[k] = torch.tensor(v, dtype=torch.long)\n","    return inputs\n","\n","\n","class TestDataset(Dataset):\n","    def __init__(self, cfg, df):\n","        self.cfg = cfg\n","        self.inputs = df['inputs'].values\n","\n","    def __len__(self):\n","        return len(self.inputs)\n","\n","    def __getitem__(self, item):\n","        inputs = prepare_input(self.cfg, self.inputs[item])\n","        return inputs"],"metadata":{"id":"-BbCJR03MAsf","executionInfo":{"status":"ok","timestamp":1663216997813,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# ====================================================\n","# Model\n","# ====================================================\n","class MeanPooling(nn.Module):\n","    def __init__(self):\n","        super(MeanPooling, self).__init__()\n","        \n","    def forward(self, last_hidden_state, attention_mask):\n","        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n","        sum_embeddings = torch.sum(last_hidden_state * input_mask_expanded, 1)\n","        sum_mask = input_mask_expanded.sum(1)\n","        sum_mask = torch.clamp(sum_mask, min=1e-9)\n","        mean_embeddings = sum_embeddings / sum_mask\n","        return mean_embeddings\n","\n","class MaxPooling(nn.Module):\n","    def __init__(self):\n","        super(MaxPooling, self).__init__()\n","        \n","    def forward(self, last_hidden_state, attention_mask):\n","        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n","        embeddings = last_hidden_state.clone()\n","        embeddings[input_mask_expanded == 0] = -1e4\n","        max_embeddings, _ = torch.max(embeddings, dim=1)\n","        return max_embeddings\n","    \n","\n","class CustomModel(nn.Module):\n","    def __init__(self, cfg, config_path=None, pretrained=False):\n","        super().__init__()\n","        self.cfg = cfg\n","        if config_path is None:\n","            self.config = AutoConfig.from_pretrained(cfg.model, output_hidden_states=True)\n","            self.config.hidden_dropout = 0.\n","            self.config.hidden_dropout_prob = 0.\n","            self.config.attention_dropout = 0.\n","            self.config.attention_probs_dropout_prob = 0.\n","            LOGGER.info(self.config)\n","        else:\n","            self.config = torch.load(config_path)\n","        if pretrained:\n","            self.model = AutoModel.from_pretrained(cfg.model, config=self.config)\n","        else:\n","            self.model = AutoModel.from_config(self.config)\n","        if self.cfg.gradient_checkpointing:\n","            self.model.gradient_checkpointing_enable()\n","\n","        # Freezing\n","        if cfg.freezing:\n","            # freezing embeddings and first 2 layers of encoder\n","            freeze((self.model).embeddings)\n","            freeze((self.model).encoder.layer[:2])\n","            cfg.after_freezed_parameters = filter(lambda parameter: parameter.requires_grad, (self.model).parameters())\n","\n","        self.pool = MeanPooling()\n","        self.fc = nn.Linear(self.config.hidden_size, cfg.target_size)\n","        self._init_weights(self.fc)\n","        \n","    def _init_weights(self, module):\n","        if isinstance(module, nn.Linear):\n","            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n","            if module.bias is not None:\n","                module.bias.data.zero_()\n","        elif isinstance(module, nn.Embedding):\n","            module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n","            if module.padding_idx is not None:\n","                module.weight.data[module.padding_idx].zero_()\n","        elif isinstance(module, nn.LayerNorm):\n","            module.bias.data.zero_()\n","            module.weight.data.fill_(1.0)\n","        \n","    def feature(self, inputs):\n","        outputs = self.model(**inputs)\n","        last_hidden_states = outputs[0]\n","        feature = self.pool(last_hidden_states, inputs['attention_mask'])\n","        return feature\n","\n","    def forward(self, inputs):\n","        feature = self.feature(inputs)\n","        output = self.fc(feature)\n","        return output"],"metadata":{"id":"5nujVXC2MIRJ","executionInfo":{"status":"ok","timestamp":1663216997813,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# ====================================================\n","# inference\n","# ====================================================\n","def inference_fn(test_loader, model, device):\n","    preds = []\n","    model.eval()\n","    model.to(device)\n","    tk0 = tqdm(test_loader, total=len(test_loader))\n","    for inputs in tk0:\n","        for k, v in inputs.items():\n","            inputs[k] = v.to(device)\n","        with torch.no_grad():\n","            y_preds = model(inputs)\n","        preds.append(y_preds.sigmoid().to('cpu').numpy())\n","    predictions = np.concatenate(preds)\n","    return predictions"],"metadata":{"id":"Ab9Z1BxbMMXd","executionInfo":{"status":"ok","timestamp":1663216997814,"user_tz":-540,"elapsed":5,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["test_dataset = TestDataset(CFG, test)\n","test_loader = DataLoader(test_dataset,\n","                         batch_size=CFG.batch_size,\n","                         shuffle=False,\n","                         num_workers=CFG.num_workers, pin_memory=True, drop_last=False)\n","predictions = []\n","for fold in CFG.trn_fold:\n","    model = CustomModel(CFG, config_path=CFG.config_path, pretrained=False)\n","    state = torch.load(CFG.path+f\"{CFG.model.replace('/', '-')}_fold{fold}_best.pth\",\n","                       map_location=torch.device('cpu'))\n","    model.load_state_dict(state['model'])\n","    prediction = inference_fn(test_loader, model, device)\n","    predictions.append(prediction)\n","    del model, state, prediction; gc.collect()\n","    torch.cuda.empty_cache()\n","predictions = np.mean(predictions, axis=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F_N7PRV5MPFc","executionInfo":{"status":"ok","timestamp":1663217489591,"user_tz":-540,"elapsed":491781,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"e7dacd3d-e9cf-48b9-b0eb-902dae0df1bc"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 307/307 [01:47<00:00,  2.86it/s]\n","100%|██████████| 307/307 [01:44<00:00,  2.93it/s]\n","100%|██████████| 307/307 [01:44<00:00,  2.94it/s]\n","100%|██████████| 307/307 [01:44<00:00,  2.93it/s]\n"]}]},{"cell_type":"code","source":["submit = sub.copy()\n","#submit.columns = [\"id\",\"label\"]\n","\n","\n","submit_predictions = np.mean(predictions, axis=1)\n","submit['label'] = submit_predictions\n","submit['state'] = (submit_predictions>0.5).astype(int)\n","\n","submit[[\"id\",\"state\"]].to_csv(os.path.join(OUTPUT_SUB_DIR,\"exp019_submission8110.csv\"),index=False,header=False)\n","display(submit)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hF0pFkDWMTRK","executionInfo":{"status":"ok","timestamp":1663217568486,"user_tz":-540,"elapsed":351,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"f5f4d08d-b723-4f98-cc36-6185f82e3354"},"execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":["              id  state     label\n","0     test_00000      1  0.726700\n","1     test_00001      1  0.989803\n","2     test_00002      1  0.981488\n","3     test_00003      0  0.069100\n","4     test_00004      0  0.027448\n","...          ...    ...       ...\n","9795  test_09795      1  0.856589\n","9796  test_09796      1  0.989671\n","9797  test_09797      0  0.104039\n","9798  test_09798      1  0.894881\n","9799  test_09799      1  0.977094\n","\n","[9800 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-edbf6bf1-6908-415a-a459-428ff85faaf3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>state</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>test_00000</td>\n","      <td>1</td>\n","      <td>0.726700</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>test_00001</td>\n","      <td>1</td>\n","      <td>0.989803</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>test_00002</td>\n","      <td>1</td>\n","      <td>0.981488</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>test_00003</td>\n","      <td>0</td>\n","      <td>0.069100</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>test_00004</td>\n","      <td>0</td>\n","      <td>0.027448</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9795</th>\n","      <td>test_09795</td>\n","      <td>1</td>\n","      <td>0.856589</td>\n","    </tr>\n","    <tr>\n","      <th>9796</th>\n","      <td>test_09796</td>\n","      <td>1</td>\n","      <td>0.989671</td>\n","    </tr>\n","    <tr>\n","      <th>9797</th>\n","      <td>test_09797</td>\n","      <td>0</td>\n","      <td>0.104039</td>\n","    </tr>\n","    <tr>\n","      <th>9798</th>\n","      <td>test_09798</td>\n","      <td>1</td>\n","      <td>0.894881</td>\n","    </tr>\n","    <tr>\n","      <th>9799</th>\n","      <td>test_09799</td>\n","      <td>1</td>\n","      <td>0.977094</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>9800 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-edbf6bf1-6908-415a-a459-428ff85faaf3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-edbf6bf1-6908-415a-a459-428ff85faaf3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-edbf6bf1-6908-415a-a459-428ff85faaf3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["plt.hist(submit.label,bins=25,edgecolor='white')\n","plt.xlabel(\"Pred\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"hqIJJMZ_MjXH","executionInfo":{"status":"ok","timestamp":1663217572812,"user_tz":-540,"elapsed":947,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"19dce579-9ad9-4431-a793-39ece8898f57"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#train,testでダブっているデータを参照\n","dup_test_ids = ['test_01704','test_03707','test_04353','test_04453','test_04645','test_06909','test_08232']\n","sub_dup= submit[submit[\"id\"].isin(dup_test_ids)]  "],"metadata":{"id":"sDDK-O_1MufJ","executionInfo":{"status":"ok","timestamp":1663217576576,"user_tz":-540,"elapsed":382,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["T = pd.DataFrame([['train_00365','train_01463','train_02156','train_04506','train_06891','train_08302','train_09470'],\n","                [0,1,1,1,1,1,0],\n","                ['test_08232','test_01704','test_06909','test_04453','test_03707','test_04353','test_04645']]).T\n","T.columns =[\"train id\",\"true label\",\"id\"]\n","T = T.sort_values(by=\"id\")\n","T = T.merge(sub_dup,how='left',on='id')\n","T"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"RU_iV8EwMxnx","executionInfo":{"status":"ok","timestamp":1663217578396,"user_tz":-540,"elapsed":4,"user":{"displayName":"Tasuku Kuriki","userId":"00300535165227155816"}},"outputId":"f443507b-3d5b-4e8e-915b-e566b9670a82"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      train id true label          id  state     label\n","0  train_01463          1  test_01704      1  0.979406\n","1  train_06891          1  test_03707      1  0.976293\n","2  train_08302          1  test_04353      1  0.866315\n","3  train_04506          1  test_04453      1  0.992491\n","4  train_09470          0  test_04645      0  0.393399\n","5  train_02156          1  test_06909      1  0.666601\n","6  train_00365          0  test_08232      0  0.353044"],"text/html":["\n","  <div id=\"df-e3b7d74d-a5f1-431b-8198-33a56a6f4e6d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train id</th>\n","      <th>true label</th>\n","      <th>id</th>\n","      <th>state</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>train_01463</td>\n","      <td>1</td>\n","      <td>test_01704</td>\n","      <td>1</td>\n","      <td>0.979406</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>train_06891</td>\n","      <td>1</td>\n","      <td>test_03707</td>\n","      <td>1</td>\n","      <td>0.976293</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>train_08302</td>\n","      <td>1</td>\n","      <td>test_04353</td>\n","      <td>1</td>\n","      <td>0.866315</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>train_04506</td>\n","      <td>1</td>\n","      <td>test_04453</td>\n","      <td>1</td>\n","      <td>0.992491</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>train_09470</td>\n","      <td>0</td>\n","      <td>test_04645</td>\n","      <td>0</td>\n","      <td>0.393399</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>train_02156</td>\n","      <td>1</td>\n","      <td>test_06909</td>\n","      <td>1</td>\n","      <td>0.666601</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>train_00365</td>\n","      <td>0</td>\n","      <td>test_08232</td>\n","      <td>0</td>\n","      <td>0.353044</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3b7d74d-a5f1-431b-8198-33a56a6f4e6d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e3b7d74d-a5f1-431b-8198-33a56a6f4e6d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e3b7d74d-a5f1-431b-8198-33a56a6f4e6d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":[],"metadata":{"id":"r_KcLF6BbBlt"},"execution_count":null,"outputs":[]}]}